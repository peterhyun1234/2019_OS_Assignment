#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <dirent.h>


static void do_ls(char *path);


int main()
{
	char buf[4096];

	int n = 0 ;
	
	
	while (fgets(buf, 4096, stdin)) 
	{

		if (strncmp(buf, "pwd", 3) == 0) {
			pid_t pid = fork();	// 자식 프로세스를 생성

			int status; // 프로세스의 상태



			if (pid == -1) 	// Fork error
			{
				fprintf(stderr, "Error occured during process creation\n");
				exit(EXIT_FAILURE);
			} 
	

			else if (pid == 0)	// Child process 
			{
				char working_directory_name[4096];
				getcwd(working_directory_name, 4096);

				printf("%s\n", working_directory_name);

				exit(EXIT_SUCCESS);
			} 


			else	// Parent process 
			{
				waitpid(pid, &status, WNOHANG);
			}

		} 




		// <~/>
			else if(strncmp(buf, "~/", 2) == 0) {
			pid_t pid = fork();	// 자식 프로세스를 생성

			int status; // 프로세스의 상태



			if (pid == -1) 	// Fork error
			{
				fprintf(stderr, "Error occured during process creation\n");
				exit(EXIT_FAILURE);
			} 
	

			else if (pid == 0)	// Child process 
			{

				int n = 0;
	 			if(chdir(getenv("HOME")) == -1)
						printf("chdir failed!!\n");
				else
					execl("/workspace/PA0/course_sched","./course_sched",(char*)0);
			} 


			else	// Parent process 
			{
				waitpid(pid, &status, WNOHANG);
				
			}

		} 



		// <make, make run, make test>
			else if(strncmp(buf, "make", 4) == 0) {
			
				
			// <make run>
				if(strncmp(buf, "make run", 8) == 0){

				
				pid_t pid = fork();	// 자식 프로세스를 생성

				int status; // 프로세스의 상태



				if (pid == -1) 	// Fork error
				{
					fprintf(stderr, "Error occured during process creation\n");
					exit(EXIT_FAILURE);
				} 
	

				else if (pid == 0)	// Child process 
				{
						execl("/usr/bin/make","make run",(char*)0);
				} 


				else	// Parent process 
				{
					waitpid(pid, &status, WNOHANG);
				}

			} 
			
				// <make test>
				else if(strncmp(buf, "make test", 8) == 0){

				
				pid_t pid = fork();	// 자식 프로세스를 생성

				int status; // 프로세스의 상태



				if (pid == -1) 	// Fork error
				{
					fprintf(stderr, "Error occured during process creation\n");
					exit(EXIT_FAILURE);
				} 
	

				else if (pid == 0)	// Child process 
				{
					execl("/user/bin/make","make test",(char*)0);
				} 


				else	// Parent process 
				{
					waitpid(pid, &status, WNOHANG);		
				}

			} 
				
				// <make>

			else
			{	
				pid_t pid = fork();	// 자식 프로세스를 생성

				int status; // 프로세스의 상태



				if (pid == -1) 	// Fork error
				{
					fprintf(stderr, "Error occured during process creation\n");
					exit(EXIT_FAILURE);
				} 	
	

				else if (pid == 0)	// Child process 
				{
						execl("/usr/bin/make","make",(char*)0);
				} 


				else	// Parent process 
				{
					waitpid(pid, &status, WNOHANG);
				
				}
			}
		}









		// < cd command >
		else if(strncmp(buf, "cd ", 2) == 0) {
			pid_t pid = fork();	// 자식 프로세스를 생성

			int status; // 프로세스의 상태



			if (pid == -1) 	// Fork error
			{
				fprintf(stderr, "Error occured during process creation\n");
				exit(EXIT_FAILURE);
			} 
	

			else if (pid == 0)	// Child process 
			{

				char *token = NULL;
				char dest_path[4000];
				char curren_dir[4096];
				int n = 0;

				token = strtok(buf, " ");

				while(token != NULL)
				{

					if(n==1)
					{
						strcpy(dest_path,token);
					}
					token = strtok(NULL, " ");
					n++;
				}


				printf("Before Current dir : %s\n",getcwd(curren_dir, 4096));
				if(chdir(getenv("HOME")) == -1)
					printf("chdir failed!!\n");
				else
					printf("After current dir : %s\n",getcwd(curren_dir, 4096));

				if(chdir("workspace/PA0") == -1)
					printf("chdir error\n");
				else
					printf("After current dir : %s\n",getcwd(curren_dir, 4096));

				exit(EXIT_SUCCESS);
			} 


			else	// Parent process 
			{
				waitpid(pid, &status, WNOHANG);
				
			}

		} 


























		// <ls command>


		else if(strncmp(buf, "/bin/ls", 7) == 0) {
			pid_t pid = fork();	// 자식 프로세스를 생성

			int status; // 프로세스의 상태



			if (pid == -1) 	// Fork error
			{
				fprintf(stderr, "Error occured during process creation\n");
				exit(EXIT_FAILURE);
			} 
	

			else if (pid == 0)	// Child process 
			{
				execl("/bin/ls","ls",(char*)0);
				//do_ls(".");
				exit(EXIT_SUCCESS);
			} 


			else	// Parent process 
			{
				waitpid(pid, &status, WNOHANG);
				
			}

		} 

		else {
			printf("I don't know what you said: %s", buf);
		}
	}

	return 0;
}











static void do_ls(char *path)
{

	DIR *d;
	struct dirent *ent;

	d = opendir(path);
	if(!d)
	{
		perror(path);
		exit(1);
	}
	while(ent = readdir(d))
	{
		printf("%s\n", ent->d_name);
	}

	closedir(d);
}




int redirect_out(char **cmd)
{
	int i;
	int fd;

	for(i =0; cmd[i] != NULL; i++)
	{
		if(!strcmp(cmd[i],">"))
		{
			break;
		}
	}

	if(cmd[i])
	{
		if(!cmd[i+1])
		{
			return -1;
		}
		else
		{
			if((fd = open(cmd[i+1],O_RDWR|O_CREAT|S_IROTH, 0644)) == -1)
			{
				perrer(cmd[i+1]);
				retrun -1;
			}
		}

		dup2(fd, STDOUT_FILENO);
		close(fd);
		cmd[i] = NULL;
		cmd[i+1] = NULL;
		for(i = i; cmd[i]! = NULL; i++)
		{
			cmd[i] = cmd[i+2];
		}

		cmd[i] = NULL;
	}
	return 0;
}

int redirect_in(char ** cmd)
{

	int fd;
	
	for(int i =0; cmd[i] != NULL; i++)
	{
		if(!strcmp(cmd[i],">"))
		{
			break;
		}
	}

	if(cmd[i])
	{
		if(!cmd[i+1])
		{
			return -1;
		}
		else
		{
			if((fd = open(cmd[i+1],O_RDONLY)) == -1)
			{
				perrer(cmd[i+1]);
				retrun -1;
			}
		}

		dup2(fd, STDIN_FILENO);
		close(fd);
		for(i = i; cmd[i]! = NULL; i++)
		{
			cmd[i] = cmd[i+2];
		}

		cmd[i] = NULL;
	}
	return 0;
}


